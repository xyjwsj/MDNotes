// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as model$0 from "../model/models.js";

export function ChangeTag(fileKey: string, tag: string): Promise<boolean> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2145614858, fileKey, tag) as any;
    return $resultPromise;
}

export function CreateFile(): Promise<model$0.RecordInfo> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1643363620) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function DeleteFile(fileKey: string): Promise<boolean> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2399497863, fileKey) as any;
    return $resultPromise;
}

export function DeleteList(): Promise<(model$0.RecordInfo | null)[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(434763757) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType2($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function DocList(): Promise<(model$0.RecordInfo | null)[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3028887424) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType2($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function ExportFile(all: boolean, fileKey: string): Promise<boolean> & { cancel(): void } {
    let $resultPromise = $Call.ByID(58726906, all, fileKey) as any;
    return $resultPromise;
}

export function FileContent(fileKey: string): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1761704901, fileKey) as any;
    return $resultPromise;
}

export function ModifyName(fileKey: string, fileName: string): Promise<boolean> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3872922023, fileKey, fileName) as any;
    return $resultPromise;
}

export function Recovery(fileKey: string): Promise<boolean> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2787769377, fileKey) as any;
    return $resultPromise;
}

export function Search(name: string): Promise<(model$0.RecordInfo | null)[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(821196262, name) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType2($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function SyncFile(fileKey: string, content: string): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1211937091, fileKey, content) as any;
    return $resultPromise;
}

export function TypeExport(typ: string, fileKey: string, content: string): Promise<boolean> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3471192188, typ, fileKey, content) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = model$0.RecordInfo.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $Create.Array($$createType1);
